#
# Command lines needed to build every flavour of libvec we support (5 OS/arch variants)
# They can be run from a Linux machine or, with little tweaking, from any machine with the right cross-compiler tools
# and clang installed.
# For Mac, the MacOSX SDK needs to be downloaded and decompressed into and appropriate directory, and the MAC_OSX_SDK
# environment variable needs to be set, pointing to that directory.
# Similarly for Windows, the Windows SDK needs to be downloaded and decompressed into and appropriate directory, and the
# WIN32_SDK environment variable needs to be set, pointing to that directory.
#
# Ideally these 2 SDK should be available in a Docker image, and this list of commands turned into a script.
#

mkdir -p build/libs/vec/shared/aarch64
mkdir -p build/libs/vec/shared/amd64

# MacOSX/amd64
export MAC_OSX_SDK=/path/to/MacOSX14.4.sdk
clang --target=x86_64-apple-darwin -fuse-ld=lld --sysroot=$MAC_OSX_SDK -I src/vec/headers/ -Wno-incompatible-pointer-types -O3 -march=core-avx2 src/vec/c/amd64/vec.c -rtlib=compiler-rt -lgcc_s.1 -shared -o build/libs/vec/shared/amd64/libvec.dylib

# Windows/amd64
export WIN32_SDK=/path/to/win/sdk/root
clang-cl --target=x86_64-pc-windows -fuse-ld=lld-link -Wno-incompatible-pointer-types /imsvc$WIN32_SDK/crt/include /imsvc$WIN32_SDK/sdk/include/ucrt /imsvc$WIN32_SDK/sdk/include/um /imsvc$WIN32_SDK/sdk/include/shared -I src/vec/headers/ /O2 /LD -march=core-avx2 src/vec/c/amd64/vec.c /o build/libs/vec/shared/amd64/vec.dll /link /libpath:$WIN32_SDK/crt/lib/x86_64 /libpath:$WIN32_SDK/sdk/lib/um/x86_64 /libpath:$WIN32_SDK/sdk/lib/ucrt/x86_64 /subsystem:windows

# Linux/amd64
clang -I src/vec/headers/ -Wno-incompatible-pointer-types -m64 -march=core-avx2 -O3 src/vec/c/amd64/vec.c -shared -o build/libs/vec/shared/amd64/libvec.so

# MacOSX/amd64
export MAC_OSX_SDK=/path/to/MacOSX14.4.sdk
clang --target=aarch64-apple-darwin -fuse-ld=lld --sysroot=$MAC_OSX_SDK -I src/vec/headers/ -Wno-incompatible-pointer-types -O3 -march=armv8-a src/vec/c/aarch64/vec.c -rtlib=compiler-rt -lgcc_s.1 -shared -o build/libs/vec/shared/aarch64/libvec.dylib

# Linux/aarch64
clang -I src/vec/headers/ -Wno-incompatible-pointer-types --target=aarch64-linux -fuse-ld=lld -m64 -march=armv8 -O3 src/vec/c/aarch64/vec.c -shared -o build/libs/vec/shared/aarch64/libvec.so

# This is copied and expanded from publish_vec_binaries.sh

VERSION="1.0.4" # adds x64 libraries
ARTIFACTORY_REPOSITORY="${ARTIFACTORY_REPOSITORY:-https://artifactory.elastic.dev/artifactory/elasticsearch-native/}"
TEMP=$(mktemp -d)

mkdir -p $TEMP/darwin-aarch64
mkdir -p $TEMP/darwin-x64
mkdir -p $TEMP/linux-aarch64
mkdir -p $TEMP/linux-x64
mkdir -p $TEMP/windows-x64
cp build/libs/vec/shared/aarch64/libvec.dylib $TEMP/darwin-aarch64/
cp build/libs/vec/shared/aarch64/libvec.so $TEMP/linux-aarch64/
cp build/libs/vec/shared/amd64/libvec.dylib $TEMP/darwin-x64/
cp build/libs/vec/shared/amd64/libvec.so $TEMP/linux-x64/
cp build/libs/vec/shared/amd64/vec.dll $TEMP/windows-x64/

echo 'Uploading to Artifactory...'
(cd $TEMP && zip -rq - .) | curl -sS -X PUT -H "X-JFrog-Art-Api: ${ARTIFACTORY_API_KEY}" --data-binary @- --location "${ARTIFACTORY_REPOSITORY}/org/elasticsearch/vec/${VERSION}/vec-${VERSION}.zip"

rm -rf $TEMP

